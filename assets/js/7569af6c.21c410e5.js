"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5075:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},l="Build and Flash",o={unversionedId:"tutorial/building-flashing",id:"tutorial/building-flashing",title:"Build and Flash",description:"Using the esp32m.py tool",source:"@site/docs/tutorial/building-flashing.md",sourceDirName:"tutorial",slug:"/tutorial/building-flashing",permalink:"/docs/tutorial/building-flashing",draft:!1,editUrl:"https://github.com/esp32m/website/edit/master/website/docs/tutorial/building-flashing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Create New Project",permalink:"/docs/tutorial/create-project"},next:{title:"MQTT setup",permalink:"/docs/tutorial/mqtt"}},s={},p=[{value:"Using the esp32m.py tool",id:"using-the-esp32mpy-tool",level:2},{value:"Manual building and flashing",id:"manual-building-and-flashing",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"build-and-flash"},"Build and Flash"),(0,r.kt)("h2",{id:"using-the-esp32mpy-tool"},"Using the esp32m.py tool"),(0,r.kt)("p",null,"This is the recommended method, simply run this command in the project directory:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ python path/to/esp32m.py build flash\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"esp32m.py")," tool is explained ",(0,r.kt)("a",{parentName:"p",href:"docs/reference/esp32m-py"},"here")),(0,r.kt)("p",null,"This assumes you use serial link to flash the application.. If you want to update using OTA, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial/ota"},"this article")),(0,r.kt)("h2",{id:"manual-building-and-flashing"},"Manual building and flashing"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to project's ",(0,r.kt)("inlineCode",{parentName:"li"},"web-ui")," folder and run")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ yarn build\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Find the ",(0,r.kt)("strong",{parentName:"li"},"./web-ui/dist/index.html.gz")," and ",(0,r.kt)("strong",{parentName:"li"},"./web-ui/main.js.gz")," files and embed them as explained ",(0,r.kt)("a",{parentName:"li",href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#embedding-binary-data"},"here")),(0,r.kt)("li",{parentName:"ol"},"Add embedded assets to the UI provider in your code like this:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'ui->addAsset("/", "text/html; charset=UTF-8", index_html_start, index_html_end, "gzip", "\\"size-hash\\"");\nui->addAsset("/main.js", "application/javascript", main_js_start, main_js_end, "gzip", "\\"size-hash\\"");\n')),(0,r.kt)("p",null,'and replace the "size-hash" by the actual file size and hash using any algorithm of your choice, with the ASCII encoded hash. See auto-generated ',(0,r.kt)("inlineCode",{parentName:"p"},"ui.hpp")," for example."),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Go to project's root and run")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ idf.py build flash\n")))}c.isMDXComponent=!0}}]);