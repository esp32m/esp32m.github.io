(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[649],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5966:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:1,title:"Project structure"},l="Project directory structure",c={unversionedId:"reference/project-structure",id:"reference/project-structure",isDocsHomePage:!1,title:"Project structure",description:"Project directory structure follows that of ESP-IDF build system, with some additions:",source:"@site/docs/reference/project-structure.md",sourceDirName:"reference",slug:"/reference/project-structure",permalink:"/docs/reference/project-structure",editUrl:"https://github.com/esp32m/website/edit/master/website/docs/reference/project-structure.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Project structure"},sidebar:"tutorialSidebar",previous:{title:"Monitoring sensors",permalink:"/docs/tutorial/sensor-monitoring"},next:{title:"esp32m.py tool",permalink:"/docs/reference/esp32m-py"}},p=[],u={toc:p};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"project-directory-structure"},"Project directory structure"),(0,i.kt)("p",null,"Project directory structure follows that of ",(0,i.kt)("a",{parentName:"p",href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#example-project"},"ESP-IDF build system"),", with some additions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".\n+-- build/\n    +-- project.bin\n+-- main/\n    +-- main.cpp\n    +-- CMakeLists.txt\n+-- web-ui/\n+-- CMakeLists.txt\n+-- partitions.csv\n+-- sdkconfig\n+-- sdkconfig.defaults\n+-- version.txt\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"build/")," folder is created by the ESP-IDF toolset during the build process and contains auxiliary and temporary build files, along with the ready-to-flash binary with a .bin extension and name matching your project name. It is safe to remove this folder, it will be re-created on the next build. In some cases it is advisable to remove the ",(0,i.kt)("strong",{parentName:"li"},"build/")," folder to force full rebuild, for example, when ESP-IDF is updated or when critical configuration options are changed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"main/")," folder contains ",(0,i.kt)("strong",{parentName:"li"},"main.cpp")," file, the entry point of your project. It may also contain other ",(0,i.kt)("em",{parentName:"li"},".c and /or "),".cpp files, if you want to split your project. "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CMakeLists.txt")," and ",(0,i.kt)("strong",{parentName:"li"},"main/CMakeLists.txt")," contain build settings for the entire project and for the project's sub-folder (if it contains source code/headers), respectively. See ",(0,i.kt)("a",{parentName:"li",href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#project-cmakelists-file"},"this article")," for details."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"partitions.csv")," - this file defines custom partition layout for the ESP32 flash memory to enable Over-The-Air application updates and accommodate application of up to 1.984MB. If you don't need OTA function, if you need more space for SPIFFS/EEPROM partition, or if your ESP32 module has more than 4MB of flash, you may adjust this file accordingly. See ",(0,i.kt)("a",{parentName:"li",href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html"},"this article")," for details."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"sdkconfig")," and ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig.defaults")," - the latter contains the list of ESP-IDF configuration options which matter for your particular project. ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig")," is generated automatically by the build system from ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig.defaults"),". If you make any changes to ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig.defaults")," you must delete ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig"),", and the build system will re-create it on the next build, with your settings specified in ",(0,i.kt)("strong",{parentName:"li"},"sdkconfig.defaults"),". Read more ",(0,i.kt)("a",{parentName:"li",href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#using-sdkconfig-defaults"},"here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"web-ui/")," folder contains everything necessary to build ReactJS single-page web application, a user interface for your project. If you don't need UI - this folder is not necessary. ",(0,i.kt)("strong",{parentName:"li"},"web-ui/")," folder is a ",(0,i.kt)("a",{parentName:"li",href:"//docs.npmjs.com/about-packages-and-modules"},"npm package")," and has the following structure:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},".\n+-- web-ui/\n    +-- dist/\n        +-- main.js.*\n        +-- index.hmtl.*\n        +-- ui.hpp\n    +-- node_modules/\n    +-- src/\n        +-- index.html\n        +-- index.ts\n    +-- babel.config.json\n    +-- CMakeLists.txt\n    +-- package.json\n    +-- tsconfig.json\n    +-- webpack.config.js\n    +-- yarn.lock\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dist/")," folder is generated automatically by the UI build system, contains temporary files and compressed html+javascript formatted as .S (c++ assembler) source files to be embedded in the application.. ",(0,i.kt)("strong",{parentName:"li"},"dist/ui.hpp")," is an auto-generated C++ header file that contains ",(0,i.kt)("inlineCode",{parentName:"li"},"void initUi(Ui* ui)")," function. This function must be called once during project initialization to set up embedded web server and make the UI available over HTTP."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"node_modules/")," is created and populated automatically during the UI build process, contains referenced javascript modules."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"src/")," usually contains two files - ",(0,i.kt)("inlineCode",{parentName:"li"},"index.html")," is an entry point to the web site and ",(0,i.kt)("inlineCode",{parentName:"li"},"index.ts")," is a Typescript file that initializes UI counterparts of the actual modules compiled into the application.."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"babel.config.json")," is a ",(0,i.kt)("a",{parentName:"li",href:"//babeljs.io/"},"Babel")," configuration file, allows to use the most recent Javascript features that may not be supported by the browsers yet, and ensures cross-browser compatibility."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"CMakeLists.txt")," tells ES-IDF build system where to find ",(0,i.kt)("inlineCode",{parentName:"li"},"dist/ui.hpp"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"dist/index.html.S")," and  ",(0,i.kt)("inlineCode",{parentName:"li"},"dist/main.js.S")," (see above)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"package.json")," lists project dependencies and contains information about the project, such as version, author, name etc. It is used by the NodeJS package manager (",(0,i.kt)("strong",{parentName:"li"},"yarn")," in our case) to manage dependencies. Read more ",(0,i.kt)("a",{parentName:"li",href:"//nodejs.org/en/knowledge/getting-started/npm/what-is-the-file-package-json/"},"here"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"tsconfig.json")," is a ",(0,i.kt)("a",{parentName:"li",href:"//typescriptlang.org"},"Typescript")," configuration file. ESP32 Manager UI library uses Typescript to validate type-safety of the Javascript code, and encourages developers to use Typescript. It is, however, not a requirement. If you don't like Typescript, you are welcome to remove this file, rename ",(0,i.kt)("inlineCode",{parentName:"li"},"src/index.ts")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"src/index.js")," and remove Typescript support from ",(0,i.kt)("inlineCode",{parentName:"li"},"webpack.config.js")," to use pure Javascript in your project."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"webpack.config.js")," is a ",(0,i.kt)("a",{parentName:"li",href:"//webpack.js.org/"},"Webpack"),' configuration file. Webpack is often referred to as "Javascript linker", a tool that bundles many Javascript modules into a single minified Javascript file, ready for deployment.'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"yarn.lock")," is a ",(0,i.kt)("a",{parentName:"li",href:"//yarnpkg.com"},"Yarn")," database file, created and maintained by Yarn.")))}d.isMDXComponent=!0}}]);