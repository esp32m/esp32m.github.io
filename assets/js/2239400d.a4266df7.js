"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2649],{6135:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var n=s(5893),i=s(1151);const r={sidebar_position:1,title:"Project structure"},o="Project directory structure",c={id:"reference/project-structure",title:"Project structure",description:"Project directory structure follows that of ESP-IDF build system, with some additions:",source:"@site/docs/reference/project-structure.md",sourceDirName:"reference",slug:"/reference/project-structure",permalink:"/docs/reference/project-structure",draft:!1,unlisted:!1,editUrl:"https://github.com/esp32m/website/edit/master/website/docs/reference/project-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Project structure"},sidebar:"tutorialSidebar",previous:{title:"Monitoring sensors",permalink:"/docs/tutorial/sensor-monitoring"},next:{title:"API",permalink:"/docs/reference/api"}},a={},d=[];function l(e){const t={a:"a",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"project-directory-structure",children:"Project directory structure"}),"\n",(0,n.jsxs)(t.p,{children:["Project directory structure follows that of ",(0,n.jsx)(t.a,{href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#example-project",children:"ESP-IDF build system"}),", with some additions:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:".\r\n+-- build/\r\n    +-- project.bin\r\n+-- main/\r\n    +-- main.cpp\r\n    +-- CMakeLists.txt\r\n+-- web-ui/\r\n+-- CMakeLists.txt\r\n+-- partitions.csv\r\n+-- sdkconfig\r\n+-- sdkconfig.defaults\n"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"build/"})," folder is created by the ESP-IDF toolset during the build process and contains auxiliary and temporary build files, along with the ready-to-flash binary with a .bin extension and name matching your project name. It is safe to remove this folder, it will be re-created on the next build. In some cases it is advisable to remove the ",(0,n.jsx)(t.strong,{children:"build/"})," folder to force full rebuild, for example, when ESP-IDF is updated or when critical configuration options are changed."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"main/"})," folder contains ",(0,n.jsx)(t.strong,{children:"main.cpp"})," file, the entry point of your project. It may also contain other *.c and /or *.cpp files, if you want to split your project."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"CMakeLists.txt"})," and ",(0,n.jsx)(t.strong,{children:"main/CMakeLists.txt"})," contain build settings for the entire project and for the project's sub-folder (if it contains source code/headers), respectively. See ",(0,n.jsx)(t.a,{href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#project-cmakelists-file",children:"this article"})," for details."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"partitions.csv"})," - this file defines custom partition layout for the ESP32 flash memory to enable Over-The-Air application updates and accommodate application of up to 1.984MB. If you don't need OTA function, if you need more space for SPIFFS/EEPROM partition, or if your ESP32 module has more than 4MB of flash, you may adjust this file accordingly. See ",(0,n.jsx)(t.a,{href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/partition-tables.html",children:"this article"})," for details."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"sdkconfig"})," and ",(0,n.jsx)(t.strong,{children:"sdkconfig.defaults"})," - the latter contains the list of ESP-IDF configuration options which matter for your particular project. ",(0,n.jsx)(t.strong,{children:"sdkconfig"})," is generated automatically by the build system from ",(0,n.jsx)(t.strong,{children:"sdkconfig.defaults"}),". If you make any changes to ",(0,n.jsx)(t.strong,{children:"sdkconfig.defaults"})," you must delete ",(0,n.jsx)(t.strong,{children:"sdkconfig"}),", and the build system will re-create it on the next build, with your settings specified in ",(0,n.jsx)(t.strong,{children:"sdkconfig.defaults"}),". Read more ",(0,n.jsx)(t.a,{href:"//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html#using-sdkconfig-defaults",children:"here"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"web-ui/"})," folder contains everything necessary to build ReactJS single-page web application, a user interface for your project. If you don't need UI - this folder is not necessary. ",(0,n.jsx)(t.strong,{children:"web-ui/"})," folder is a ",(0,n.jsx)(t.a,{href:"//docs.npmjs.com/about-packages-and-modules",children:"npm package"})," and has the following structure:"]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:".\r\n+-- web-ui/\r\n    +-- dist/\r\n        +-- main.js.*\r\n        +-- index.hmtl.*\r\n        +-- ui.hpp\r\n    +-- src/\r\n        +-- index.html\r\n        +-- index.ts\r\n    +-- CMakeLists.txt\r\n    +-- package.json\r\n    +-- webpack.config.js\r\n    +-- yarn.lock\r\n\n"})}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"dist/"})," folder is generated automatically by the UI build system, contains temporary files and compressed html+javascript formatted as .S (c++ assembler) source files to be embedded in the application.. ",(0,n.jsx)(t.strong,{children:"dist/ui.hpp"})," is an auto-generated C++ header file that contains ",(0,n.jsx)(t.code,{children:"void initUi(Ui* ui)"})," function. This function must be called once during project initialization to set up embedded web server and make the UI available over HTTP."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"src/"})," usually contains two files - ",(0,n.jsx)(t.code,{children:"index.html"})," is an entry point to the web site and ",(0,n.jsx)(t.code,{children:"index.ts"})," is a Typescript file that initializes UI counterparts of the actual modules compiled into the application.."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"CMakeLists.txt"})," tells ES-IDF build system where to find ",(0,n.jsx)(t.code,{children:"dist/ui.hpp"}),", ",(0,n.jsx)(t.code,{children:"dist/index.html.S"})," and  ",(0,n.jsx)(t.code,{children:"dist/main.js.S"})," (see above)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"package.json"})," lists project dependencies and contains information about the project, such as version, author, name etc. It is used by the NodeJS package manager (",(0,n.jsx)(t.strong,{children:"yarn"})," in our case) to manage dependencies. Read more ",(0,n.jsx)(t.a,{href:"//nodejs.org/en/knowledge/getting-started/npm/what-is-the-file-package-json/",children:"here"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"webpack.config.js"})," is a ",(0,n.jsx)(t.a,{href:"//webpack.js.org/",children:"Webpack"}),' configuration file. Webpack is often referred to as "Javascript linker", a tool that bundles many Javascript modules into a single minified Javascript file, ready for deployment.']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.strong,{children:"yarn.lock"})," is a ",(0,n.jsx)(t.a,{href:"//yarnpkg.com",children:"Yarn"})," database file, created and maintained by Yarn."]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>c,a:()=>o});var n=s(7294);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);