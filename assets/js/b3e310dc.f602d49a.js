"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4486],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=i,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(f,o(o({ref:t},s),{},{components:r})):n.createElement(f,o({ref:t},s))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1650:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:1},o="Create New Project",l={unversionedId:"tutorial/create-project",id:"tutorial/create-project",title:"Create New Project",description:"Set up the environment and prerequisites as explained in the Quick Start article",source:"@site/docs/tutorial/create-project.md",sourceDirName:"tutorial",slug:"/tutorial/create-project",permalink:"/docs/tutorial/create-project",draft:!1,editUrl:"https://github.com/esp32m/website/edit/master/website/docs/tutorial/create-project.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Quick start",permalink:"/docs/starting"},next:{title:"Build and Flash",permalink:"/docs/tutorial/building-flashing"}},p={},c=[{value:"Creating new project from template",id:"creating-new-project-from-template",level:2},{value:"Copying the existing project",id:"copying-the-existing-project",level:2}],s={toc:c};function u(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-new-project"},"Create New Project"),(0,i.kt)("p",null,"Set up the environment and prerequisites as explained in the ",(0,i.kt)("a",{parentName:"p",href:"/docs/starting"},"Quick Start")," article"),(0,i.kt)("h2",{id:"creating-new-project-from-template"},"Creating new project from template"),(0,i.kt)("p",null,"This is the recommended method, as it will automatically set up the environment for you."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create new directory. The name is important, it will be used by the build system and the UI to reference your project."),(0,i.kt)("li",{parentName:"ul"},"Run this command inside the new directory:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ python /path/to/esp32m.py init\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"esp32m.py")," tool is explained ",(0,i.kt)("a",{parentName:"p",href:"docs/reference/esp32m-py"},"here")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"web-ui")," folder in the new project will be populated by default. If you don't need UI, pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"--ui=skip")," command line option."),(0,i.kt)("h2",{id:"copying-the-existing-project"},"Copying the existing project"),(0,i.kt)("p",null,"It is possible to create new project by simply cloning the existing project directory. The following files and folders may be excluded:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"}," ./build/\n ./sdkconfig\n ./web-ui/dist/\n ./web-ui/node_modules/\n ./web-ui/yarn.lock/\n")),(0,i.kt)("p",null,"Additionally, you will need to make chanes to the following files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"./CMakeLists.txt"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"specify correct paths on the line ",(0,i.kt)("inlineCode",{parentName:"li"},'set(EXTRA_COMPONENT_DIRS ".../esp32m/core/esp32m" "web-ui")'),";"),(0,i.kt)("li",{parentName:"ul"},"specify project name on the ",(0,i.kt)("inlineCode",{parentName:"li"},"project(...)")," line."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"./web-ui/package.json"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"specify project name on the ",(0,i.kt)("inlineCode",{parentName:"li"},'"name":"..."')," line.")))))}u.isMDXComponent=!0}}]);